"use babel";
// @flow

import Rx from "rxjs";
import { List } from "immutable";
import { addPlanConfig } from "../../../ExecutionControlEpic/PlanConfigurationFeature/Actions/AddPlanConfig";
import type { AddPlanConfigAction } from "../../../ExecutionControlEpic/PlanConfigurationFeature/Actions/AddPlanConfig";
import { removeGeneratedPlans } from "../../../ExecutionControlEpic/PlanConfigurationFeature/Actions/RemoveGeneratedPlans";
import { selectPlansOfTool } from "../../../ExecutionControlEpic/PlanConfigurationFeature/Selectors/PlanConfigs";
import { selectPlansReducer } from "../../../GlobalSystem/Selectors";

import type {
  GeneratedPlanObject,
  PlanConfig,
} from "../../../ExecutionControlEpic/PlanConfigurationFeature/Types/types.js.flow";
import type { Package, PackagesRefreshedAction } from "../Types/types.js.flow";
import { generatePlanId } from "../../../ExecutionControlEpic/PlanConfigurationFeature/Model/id";

const generatePlansEpic = (action$: Observable, store: Store) => {
  return action$
    .ofType("PACKAGES_REFRESHED")
    .map((action: PackagesRefreshedAction) => {
      return Rx.Observable.from(action.payload.packages)
        .map(async (packageInfo: Package) => {
          if (packageInfo.plugin.generatePlansForPackage == null) {
            return [];
          }
          const plansForTool: List<PlanConfig> = selectPlansOfTool(
            selectPlansReducer(store.getState()),
            packageInfo.plugin.tool.id,
          );
          const generatedPlans = packageInfo.plugin.generatePlansForPackage(
            packageInfo.path,
          );
          const generatePlanActions = (await generatedPlans)
            .map((planObject: GeneratedPlanObject) =>
              addPlanConfig({
                id: generatePlanId(),
                name: planObject.name,
                tool: packageInfo.plugin.tool,
                config: planObject.value,
                packageInfo,
                autoGenerated: true,
                autoRun: planObject.autoRun,
                pinned: planObject.autoRun === true ? true : false,
                ownSource: planObject.ownSource || false,
              }),
            )
            .filter(
              (action: AddPlanConfigAction) =>
                plansForTool.findIndex(
                  (config: PlanConfig) =>
                    config.name === action.payload.name &&
                    config.packageInfo.path === packageInfo.path &&
                    config.autoGenerated === false,
                ) === -1,
            );
          return [
            removeGeneratedPlans(packageInfo.plugin.tool),
            ...generatePlanActions,
          ];
        })
        .mergeAll()
        .mergeAll();
    })
    .mergeAll();
};

export default generatePlansEpic;
